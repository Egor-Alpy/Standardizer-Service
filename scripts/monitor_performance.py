#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""
import asyncio
import time
from datetime import datetime, timedelta
from rich.console import Console
from rich.table import Table
from rich.live import Live
from rich.panel import Panel
from rich.layout import Layout
from rich import box

from src.storage.classified_mongo import ClassifiedMongoStore
from src.storage.standardized_mongo import StandardizedMongoStore
from src.core.config import settings

console = Console()


class PerformanceMonitor:
    def __init__(self):
        self.classified_store = None
        self.standardized_store = None
        self.start_time = time.time()
        self.last_counts = {}
        self.speeds = {
            "1min": 0,
            "5min": 0,
            "total": 0
        }
        self.history = []  # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        self.classified_store = ClassifiedMongoStore(
            settings.classified_mongodb_database,
            settings.classified_collection_name
        )
        self.standardized_store = StandardizedMongoStore(
            settings.standardized_mongodb_database,
            settings.standardized_collection_name
        )

        if not await self.classified_store.test_connection():
            raise Exception("Cannot connect to classified MongoDB")
        if not await self.standardized_store.test_connection():
            raise Exception("Cannot connect to standardized MongoDB")

    async def get_current_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        classified_stats = await self.classified_store.get_statistics()
        standardized_stats = await self.standardized_store.get_statistics()

        total_classified = classified_stats.get("total_classified", 0)
        total_standardized = standardized_stats.get("total", 0)

        by_status = classified_stats.get("by_status", {})
        pending = by_status.get("pending", 0) + by_status.get(None, total_classified - sum(by_status.values()))
        processing = by_status.get("processing", 0)
        failed = by_status.get("failed", 0)

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã (—Ç–æ–≤–∞—Ä—ã –≤ processing)
        active_workers = await self.classified_store.collection.distinct(
            "standardization_worker_id",
            {"standardization_status": "processing"}
        )

        return {
            "total_classified": total_classified,
            "total_standardized": total_standardized,
            "pending": pending,
            "processing": processing,
            "failed": failed,
            "active_workers": len(active_workers),
            "worker_ids": active_workers
        }

    def calculate_speeds(self, current_count):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        now = time.time()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.history.append({
            "time": now,
            "count": current_count
        })

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        cutoff_time = now - 300
        self.history = [h for h in self.history if h["time"] > cutoff_time]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        speeds = {}

        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        one_min_ago = now - 60
        one_min_records = [h for h in self.history if h["time"] > one_min_ago]
        if len(one_min_records) >= 2:
            time_diff = one_min_records[-1]["time"] - one_min_records[0]["time"]
            count_diff = one_min_records[-1]["count"] - one_min_records[0]["count"]
            speeds["1min"] = (count_diff / time_diff * 60) if time_diff > 0 else 0
        else:
            speeds["1min"] = 0

        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        if len(self.history) >= 2:
            time_diff = self.history[-1]["time"] - self.history[0]["time"]
            count_diff = self.history[-1]["count"] - self.history[0]["count"]
            speeds["5min"] = (count_diff / time_diff * 60) if time_diff > 0 else 0
        else:
            speeds["5min"] = 0

        # –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        total_time = now - self.start_time
        speeds["total"] = (current_count / total_time * 60) if total_time > 0 else 0

        return speeds

    def estimate_time_remaining(self, pending, speed):
        """–û—Ü–µ–Ω–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
        if speed <= 0:
            return "‚àû"

        minutes = pending / speed
        if minutes < 60:
            return f"{int(minutes)} –º–∏–Ω"
        elif minutes < 1440:
            hours = minutes / 60
            return f"{hours:.1f} —á"
        else:
            days = minutes / 1440
            return f"{days:.1f} –¥"

    def create_display(self, stats, speeds):
        """–°–æ–∑–¥–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        layout = Layout()

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_table = Table(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏", box=box.ROUNDED)
        stats_table.add_column("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", style="cyan")
        stats_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green", justify="right")
        stats_table.add_column("–ü—Ä–æ—Ü–µ–Ω—Ç", style="yellow", justify="right")

        total = stats["total_classified"]
        standardized = stats["total_standardized"]
        pending = stats["pending"]

        stats_table.add_row(
            "–í—Å–µ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ",
            f"{total:,}",
            "100%"
        )
        stats_table.add_row(
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–æ",
            f"{standardized:,}",
            f"{standardized / total * 100:.1f}%" if total > 0 else "0%"
        )
        stats_table.add_row(
            "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            f"{pending:,}",
            f"{pending / total * 100:.1f}%" if total > 0 else "0%"
        )
        stats_table.add_row(
            "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            f"{stats['processing']:,}",
            f"{stats['processing'] / total * 100:.1f}%" if total > 0 else "0%"
        )
        stats_table.add_row(
            "–° –æ—à–∏–±–∫–∞–º–∏",
            f"{stats['failed']:,}",
            f"{stats['failed'] / total * 100:.1f}%" if total > 0 else "0%"
        )

        # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        speed_table = Table(title="‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏", box=box.ROUNDED)
        speed_table.add_column("–ü–µ—Ä–∏–æ–¥", style="cyan")
        speed_table.add_column("–¢–æ–≤–∞—Ä–æ–≤/–º–∏–Ω", style="green", justify="right")
        speed_table.add_column("–¢–æ–≤–∞—Ä–æ–≤/—á–∞—Å", style="yellow", justify="right")

        for period, label in [("1min", "–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–Ω—É—Ç–∞"), ("5min", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç"),
                              ("total", "–° –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")]:
            speed = speeds[period]
            speed_table.add_row(
                label,
                f"{speed:.0f}",
                f"{speed * 60:,.0f}"
            )

        # –ü—Ä–æ–≥–Ω–æ–∑
        current_speed = speeds["1min"] if speeds["1min"] > 0 else speeds["5min"]
        eta = self.estimate_time_remaining(pending, current_speed)

        # –í–æ—Ä–∫–µ—Ä—ã
        workers_info = f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: {stats['active_workers']}"
        if stats['worker_ids']:
            workers_info += f"\nID: {', '.join(stats['worker_ids'][:5])}"
            if len(stats['worker_ids']) > 5:
                workers_info += f" –∏ –µ—â–µ {len(stats['worker_ids']) - 5}"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_text = f"""
[bold green]–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:[/bold green] {str(timedelta(seconds=int(time.time() - self.start_time)))}
[bold cyan]–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:[/bold cyan] {eta} (–ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏)
[bold yellow]{workers_info}[/bold yellow]
[bold magenta]–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:[/bold magenta] {datetime.now().strftime('%H:%M:%S')}
"""

        # –ö–æ–º–ø–æ–Ω—É–µ–º layout
        upper_layout = Layout()
        upper_layout.split_row(
            Layout(stats_table),
            Layout(speed_table)
        )

        layout.split_column(
            upper_layout,
            Layout(Panel(info_text.strip(), title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", border_style="blue"), size=6)
        )

        return layout

    async def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        await self.initialize()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        initial_stats = await self.get_current_stats()
        self.start_count = initial_stats["total_standardized"]

        with Live(self.create_display(initial_stats, self.speeds), refresh_per_second=1) as live:
            while True:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                    stats = await self.get_current_stats()

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
                    current_count = stats["total_standardized"] - self.start_count
                    speeds = self.calculate_speeds(current_count)
                    self.speeds = speeds

                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    live.update(self.create_display(stats, speeds))

                    # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(5)

                except KeyboardInterrupt:
                    break
                except Exception as e:
                    console.print(f"[red]Error: {e}[/red]")
                    await asyncio.sleep(5)

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.classified_store:
            await self.classified_store.close()
        if self.standardized_store:
            await self.standardized_store.close()


async def main():
    monitor = PerformanceMonitor()
    try:
        console.print("[bold cyan]Starting performance monitor...[/bold cyan]")
        console.print("[dim]Press Ctrl+C to stop[/dim]\n")
        await monitor.run()
    except KeyboardInterrupt:
        console.print("\n[yellow]Monitor stopped[/yellow]")
    finally:
        await monitor.close()


if __name__ == "__main__":
    asyncio.run(main())